<<< 복습 >>> 

JOIN

정규화(NF): 테이블로 분리 시키는 것
필요 이유 : 

### Google Colab 기본 사용법 ###

방향키 : 셀간 이동
enter : 편집모드
ctrl + Enter : 셀 실행
shift + Enter : 셀 실행 + 다음 셀 선택

ctrl + M D: 셀 삭제
ctrl + M K : 셀 위로 이동
Ctrl + M J : 셀 아래로 이동

#셀에서 사용 가능한 함수들?

>>> a * 2
[1, 2, 3, 1, 2, 3]
>>> a + 2
Traceback (most recent call last):
  File "<pyshell#6>", line 1, in <module>
    a + 2
TypeError: can only concatenate list (not "int") to list
# int + list (덧셈, 뺄셈, 나눗셈 안됌, only 곱셈만)


score = [20, 50, 60, 40, 30]
>>> sum(score)
200
>>> sum(score)/len(a)
66.66666666666667
>>> len(score)
5
>>> sum(score)/len(score)

>> sum(score)/len(score)
40.0
>>> a
[1, 2, 3]
>>> b = [4, 5, 6]
>>> a = [1, 2, 3]
>>> a
[1, 2, 3]
>>> b
[4, 5, 6]
>>> c = [a, b]
>>> c
[[1, 2, 3], [4, 5, 6]]
>>> c[1][1]
5



#comprenson 컴프리헨슨 & 인덱싱

>>> t = [i*3 for i in range(1, 11) ]
>>> t
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> [3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> len(t)
10
>>> t[:]
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> t[2:]
[9, 12, 15, 18, 21, 24, 27, 30]
>>> t[:5]
[3, 6, 9, 12, 15]
>>> t[3:6]
[12, 15, 18]

# dir(np1) 
# help(np1)

데이터를 저장할 수 있는 크기
2 ** 8 #8 bit(비트) =  1byte(바이트)
256
>>> 2 ** 16 = 2byte
65536
>>> 2 ** 32 = 4byte
42,(억)9496,(만)7296
-21억~ 21억

>>> 2 ** 64 = 8byte
18446744073709551616

1844,(경)6744(조),0737(억),0955(만),1616
-922경 ~ 922 감당할수 있는 데이터 그릇 크기 

1,000,000
100,0000

#선생님 공부법
함수(method)를 복사해서 처음보는 내용 메모장 붙여서 천천히 읽어보기, 
다 알필요는 없으나 중복되는 것들을도 많으나 바로 이해할 수 있는 size sort, max, min, mean등 이해 제외하고 알아보는 방법


Tot = 0
>>> for i in range(10):
	Tot += i

	
>>> Tot /len(t)
4.5
>>> t
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> t*3
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> t +10

>>> type(t)
<class 'list'>
>>> dir(t)
['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']


>>> t
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> len(t)
10
>>> import sys
>>> sys.getsizeof(t)
184
>>> t * 2
[3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30]
>>> sys.getsizeof(t*2)
216

== 오전 과제 9구단 만들기 ==
import numpy as np

gdan = [[x, y, x*y] for x in range(2,10) for y in range(1,10)]

ngdan = np.array(gdan, dtype = np.int16)



=========오후수업======

#이진연산
#broadcasting


import numpy as np
import pandas as pd

!pwd

!mkdir aa bb cc dd

!ls

!nl  /etc/issue.net

!uname -r

!ls

!ls sample_data/

type(pd)

s1 = pd.Series([1, 2, 3, 4])

s2 = pd.Series(['서울', '부산', '대구', '광주'])

s1.dtype

s2.dtypes

type(s1)

type(s2)

s3 = pd.Series([15, 45, 75, 35, 25])

s3.sum()

s3.describe

s3.mean()


dir(s3)

s3.shape

s3.size

s3

s3.sub(5)

s3 - 15

s3 + 100

s3.add(200)

k = [2, 3, 4, 5]


for idx, value in enumerate(k):
    print(idx, value)

s2

for idx, value in enumerate(s2):
    print(idx, value)

s2

s2.ndim

s4 = ['설악산', '지리산', '덕유산', '소백산', '한라산']

s4 = pd.Series(['설악산', '지리산', '덕유산', '소백산', '한라산'])

s4

s5 = pd.Series(['설악산', '지리산', '덕유산', '소백산', '한라산'], index=['A', 'B', 'C', 'D', 'E'])

s5

s3

s22 = pd.DataFrame(s5)

s22

type(s22)
